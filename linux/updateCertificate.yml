---
- name: Set global variables for the localhost
  hosts: localhost
  tags: always
  tasks:
    - name: Set the path for the chain of validation
      ansible.builtin.set_fact:
        pathChainValidation: "{{ pathChainValidation | default('/tmp/Digital-Signature-public-chain-EQ-ASE-EMS-PROD.alfa.local.crt') }}"

    - name: Set the path for the leaf certificate
      ansible.builtin.set_fact:
        pathLeafCertificate: "{{ pathLeafCertificate | default('/tmp/Digital-Signature-public-leaf-EQ-ASE-EMS-PROD.alfa.local.crt') }}"

    - name: Set the path for a temporary file to contain the contents of the new certificate
      ansible.builtin.set_fact:
        pathNewCertificate: "{{ pathNewCertificate | default('/tmp/chain_rev.new') }}"

- name: Set global variables for the remote host
  hosts: all
  tags: always
  tasks:
    - name: Set the path for a temporary file to contain the contents of the new certificate
      ansible.builtin.set_fact:
        pathNewCertificate: "{{ pathNewCertificate | default('/tmp/chain_rev.new') }}"

    - name: Set the path for the certificate in use
      ansible.builtin.set_fact:
        #pathCertificate: "{{ pathCertificate | default('/opt/osi/monarch/data/tennet_aos/certs/chain_rev.pem') }}"
        pathCertificate: "{{ pathCertificate | default('/tmp/chain_rev.pem') }}"

    - name: Set the path for the backup certificate
      ansible.builtin.set_fact:
        #pathBackupCertificate: "{{ pathBackupCertificate | default('/opt/osi/monarch/data/tennet_aos/certs/chain_rev.bak') }}"
        pathBackupCertificate: "{{ pathBackupCertificate | default('/tmp/chain_rev.bak') }}"

- name: Create new certificate
  hosts: localhost
  tags: create
  tasks:
    - name: Check existence of the variable
      ansible.builtin.debug:
        var: pathNewCertificate

    - name: Create a file for holding the new certificate
      ansible.builtin.file:
        path: "{{ pathNewCertificate }}"
        mode: "0644"
        state: touch

    - name: Place the chain of validation in the new certificate
      ansible.builtin.copy:
        src: "{{ pathChainValidation }}" 
        dest: "{{ pathNewCertificate }}"

    - name: Place the leaf certificate in the new certificate
      ansible.builtin.shell:
        cmd: "openssl x509 -in {{ pathLeafCertificate }} >> {{ pathNewCertificate }}"


- name: Deploy certificate in parallel with the old certificate
  hosts: all
  tags: parallel
  tasks:
    - name: Make a backup of the certificate in use
      ansible.builtin.copy:
        src: "{{ pathCertificate }}"
        dest: "{{ pathBackupCertificate }}"
        remote_src: yes
        mode: "0644"
      register: backup_creation

    - name: Exit the playbook if the backup file is not created
      ansible.builtin.fail:
        msg: "The backup file '{{ pathBackupCertificate }}' was not created. Please ensure the operation is possible and try again."
      when: not backup_creation['state']=="file"

    - name: Debug contents of local file
      ansible.builtin.debug:
        msg: "{{ lookup('file', pathNewCertificate) }}"

    - name: Append the contents of the new certificate to the certificate in use
      ansible.builtin.blockinfile:
        path: "{{ pathCertificate }}"
        block: "{{ lookup('file', pathNewCertificate) }}"
        marker: "# {mark} ANSIBLE MANAGED CERTIFICATE BLOCK"
        insertbefore: EOF
        create: false
      when: backup_creation['state']=="file"

- name: Deploy certificate and clean backup
  hosts: all
  tags: clean

  tasks:
    - name: Make a backup of the certificate in use
      ansible.builtin.copy:
        src: "{{ pathCertificate }}"
        dest: "{{ pathBackupCertificate }}"
        remote_src: yes
        mode: "0644"
      register: backup_creation

    - name: Exit the playbook if the backup file is not created
      ansible.builtin.fail:
        msg: "The backup file '{{ pathBackupCertificate }}' was not created. Please ensure the operation is possible and try again."
      when: not backup_creation['state']=="file"

    - name: Debug contents of local file
      ansible.builtin.debug:
        msg: "{{ lookup('file', pathNewCertificate) }}"
      delegate_to: localhost

    - name: Copy the contents of the new certificate to the certificate in use
      ansible.builtin.copy:
        src: "{{ pathNewCertificate }}"
        dest: "{{ pathCertificate }}"
        mode: "0644"
      when: backup_creation['state']=="file"
